{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red224\green224\blue224;\red35\green35\blue35;}
{\*\expandedcolortbl;;\cssrgb\c90196\c90196\c90196;\cssrgb\c18431\c18431\c18431;}
\margl1440\margr1440\vieww18660\viewh20120\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
## This is an AWS-provided set of scripts to help customers and partners diagnose client-side performance issues, such as IO constraints and network saturation, specifically when using DMS to migrate customer workloads to AWS. \
\
##Depending on your source, you may have had your default counters suppressed or otherwise, disabled by GPO or registry key. This will reset all performance monitor counters to OS defaults, resynch all performance monitors, restart the Windows Management Instrumentation (WMI) service, restart the Performance Logs & Alerts (PLA) service, and return you to your home directory. \
\
cd c:\\windows\\system32\
lodctr /R\
cd c:\\windows\\sysWOW64\
lodctr /R\
winmgmt.exe /resyncperf\
Get-Service -Name "pla" | Restart-Service -Verbose\
Get-Service -Name "winmgmt" | Restart-Service -Force -Verbose\
cd ~/\
\
##The next portion of the script will give you, the user, insight into what is happening in the most commonly found bottlenecks for customers and partners. You will pull the statistics for key Physical Disk, CPU, Memory, and Network Interface counters. Note: unless MSSQL is installed on C: (and hopefully isn't) - you won't find much here. Feel free to add more counters, but these are the most frequent counters used for identifying bottlenecks on migrations. \
\
$counters = @(\
 \'a0 '\\PhysicalDisk(**)\\% Idle Time'\
 \'a0 '\\PhysicalDisk(**)\\Avg. Disk sec/Read'\
 \'a0 '\\PhysicalDisk(**)\\Avg. Disk sec/Write'\
 \'a0 '\\PhysicalDisk(**)\\Avg. Disk sec/Transfer'\
 \'a0 '\\PhysicalDisk(**)\\Disk Reads/sec'\
 \'a0 '\\PhysicalDisk(**)\\Disk Writes/sec'\
 \'a0 '\\PhysicalDisk(**)\\Disk Transfers/sec'\
 \'a0 '\\PhysicalDisk(**)\\Current Disk Queue Length'\
 \'a0 '\\PhysicalDisk(**)\\Avg. Disk Queue Length'\
   '\\Processor(**)\\% Processor time'\
   '\\Processor(**)\\% Privileged time'\
   '\\Processor(**)\\% user time'\
   '\\Processor(**)\\% idle time'\
   '\\Processor(**)\\DPCs Queued/sec'\
 \'a0 '\\Memory\\Available Bytes'\
 \'a0 '\\Memory\\Pages/sec'\
 \'a0 '\\Network Interface(**)\\Bytes Total/sec'\
 \'a0 '\\Network Interface(**)\\Output Queue Length'\
 ) \
\
##This final section will take the counters, declared as variables from the previous section, and make it human readable, and re-name a few of the column headers. We will then pull counters over 3 different intervals, and is most useful for customers to run this when they start seeing problems with their MSSQL server when DMS is in use. Finally, we will declare a variable for the output's filename, append today's date to it, and then call that variable to save the results to a file for reference.  \
\
$samples = foreach ($counter in $counters) \{\
   $sample = (Get-Counter -Counter $counter -sampleinterval 3).CounterSamples\
   [pscustomobject]@\{\
     Category = $sample.Path.Split('\\')[3]\
     Counter = $sample.Path.Split('\\')[4]\
     Instance = $sample.InstanceName\
     Value = [math]::Round($sample.CookedValue[0])\
   \}\
 \}\
\
$filename = "perfmon_results-" + (Get-Date).tostring("dd-MM-yyyy-hh-mm-ss") \
$samples | Out-File $filename\
\
##Please use the output of the perfmon.txt file to open a support case if needed to further troubleshoot. Without this granular information, it is difficult in order to receive timely assitance. \
}